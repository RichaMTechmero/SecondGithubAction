#name: cd
#on:
#  push:
#    branches:
#      - main
#jobs:
#  build:
#    name: Deploy App For Dev Release
#    runs-on: macos-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#        with:
#          ref: ${{ github.event.inputs.branch }}
#      - name: Fetch latest code
#        run: |
#          git pull
#      - name: Install the Apple certificate and provisioning profile
#        env:
#          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE }}
#          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE }}
#          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#        run: >
#          # create variables
#
#          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#
#          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#
#          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#
#          # import certificate and provisioning profile from secrets
#
#          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
#
#          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
#
#          # create temporary keychain
#
#          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#
#          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#
#          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#
#          # import certificate to keychain
#
#          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#
#          security list-keychain -d user -s $KEYCHAIN_PATH
#
#          # apply provisioning profile
#
#          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#
#          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
#      - name: Install Pods
#        run: pod install
#      - name: Increase version code
#        run: xcrun agvtool next-version
#      - name: Commit and push changes
#        run: |
#          git config user.email "github-actions@github.com"
#          git config user.name "Github Actions"
#          git commit -am "Bump version code"
#          git push origin HEAD
#      - name: Read Changelog File
#        id: ghpages
#        uses: jaywcjlove/github-action-read-file@main
#        with:
#          path: ChangeLog/cicd_changelog.md
#      - name: Clean Build Archive
#        run: xcodebuild -workspace Starboard.xcworkspace -scheme Starboard clean archive -configuration DevRelease -sdk iphoneos -archivePath Starboard.xcarchive
#      - name: Export IPA
#        run:  xcodebuild -exportArchive -archivePath Starboard.xcarchive -exportOptionsPlist Starboard/exportOptions.plist -exportPath $RUNNER_TEMP/export
#      - name: Decode auth. api key file and save it
#        env:
#          API_KEY_BASE64 : ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
#        run: |
#              ls
#              mkdir private_keys
#              echo -n "$API_KEY_BASE64" | base64 --decode --output private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8
#              ls  private_keys
#              echo "After Saving :"
#      - name: Upload file to test flight
#        run: |
#             echo "Star Uploading"
#             xcrun altool --validate-app -f  $RUNNER_TEMP/export/Starboard.ipa -t ios --apiKey ${{ secrets.APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.APPSTORE_API_ISSUER_ID }}
#             xcrun altool --upload-app -f  $RUNNER_TEMP/export/Starboard.ipa -t ios --apiKey ${{ secrets.APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.APPSTORE_API_ISSUER_ID }}
#      - name: Notify on Slack
#        env:
#          TITLE : "CI/CD Starboard-iOS"
#          APP_VERSION : ""
#          BUILD_VERSION : ""
#        run: |
#             export APP_VERSION=$(xcodebuild -showBuildSettings | grep MARKETING_VERSION | tr -d 'MARKETING_VERSION =')
#             export BUILD_VERSION=$(xcodebuild -showBuildSettings | grep CURRENT_PROJECT_VERSION | tr -d 'CURRENT_PROJECT_VERSION =')
#             curl -X POST -H "Authorization:Bearer ${{ secrets.SLACK_AUTH_TOKEN }}" -H "Content-Type:application/json" --data "{'channel':'${{ secrets.SLACK_CHANNEL_ID }}','username':'$TITLE','text':' \n<@UHUT7CJ9F>,<@U01JVNS10TA>:\n*Internal Test App $APP_VERSION($BUILD_VERSION) := *https://testflight.apple.com/join/bGbJS5xK\n*Changelog -> * \n${{ steps.ghpages.outputs.content }}'}" https://slack.com/api/chat.postMessage
#             echo "Deployment finished"







#name: cd
#on:
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]
#
#
#  # Allows you to run this workflow manually from the Actions a tab
#  workflow_dispatch:
#
#
#jobs:
#  deploy:
#    name: Deploying to Testflight
#    runs-on: macOS-latest
#    
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v1
# 
#
#      - name: Deploy iOS Beta to TestFlight via Fastlane
#        uses: maierj/fastlane-action@v1.4.0
#        with:
#          lane: closed_beta
#        env:
#          APP_STORE_CONNECT_TEAM_ID: '${{ secrets.APP_STORE_CONNECT_TEAM_ID }}'
#          DEVELOPER_APP_ID: '${{ secrets.DEVELOPER_APP_ID }}'
#          DEVELOPER_APP_IDENTIFIER: '${{ secrets.DEVELOPER_APP_IDENTIFIER }}'
#          DEVELOPER_PORTAL_TEAM_ID: '${{ secrets.DEVELOPER_PORTAL_TEAM_ID }}'
#          FASTLANE_APPLE_ID: '${{ secrets.FASTLANE_APPLE_ID }}'
#          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: '${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}'
#          MATCH_PASSWORD: '${{ secrets.MATCH_PASSWORD }}'
#          GIT_AUTHORIZATION: '${{ secrets.GIT_AUTHORIZATION }}'
#          PROVISIONING_PROFILE_SPECIFIER: '${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}'
#          TEMP_KEYCHAIN_PASSWORD: '${{ secrets.TEMP_KEYCHAIN_PASSWORD }}'
#          TEMP_KEYCHAIN_USER: '${{ secrets.TEMP_KEYCHAIN_USER }}'
#          APPLE_KEY_ID: '${{ secrets.APPLE_KEY_ID }}'
#          APPLE_ISSUER_ID: '${{ secrets.APPLE_ISSUER_ID }}'
#          APPLE_KEY_CONTENT: '${{ secrets.APPLE_KEY_CONTENT }}' 




name: cd

on: [push]
  # manual trigger but change to any supported event
  # see addl: https://www.andrewhoog.com/post/how-to-build-react-native-android-app-with-github-actions/#3-run-build-workflow

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      # this was more debug as was curious what came pre-installed
      # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: checkout repository
        uses: actions/checkout@v3

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
      - name: Install Pods
        run: pod install
      - name: Increase version code
        run: xcrun agvtool next-version
      - name: Commit and push changes
        run: |
          git config user.email "richamtechmero@gmail.com"
          git config user.name "RichaMTechmero"
          git config credential.username "RichaMTechmero"
          git config --global credential.useHttpPath true
          git config --global -e
          git commit -am "Bump version code"
          git push origin HEAD
      - name: Read Changelog File
        id: ghpages
        uses: jaywcjlove/github-action-read-file@main
        with:
          path: ChangeLog/cicd_changelog.md
      - name: Clean Build Archive
        run: xcodebuild -workspace Starboard.xcworkspace -scheme Starboard clean archive -configuration DevRelease -sdk iphoneos -archivePath Starboard.xcarchive
      - name: Export IPA
        run:  xcodebuild -exportArchive -archivePath Starboard.xcarchive -exportOptionsPlist Starboard/exportOptions.plist -exportPath $RUNNER_TEMP/export
      - name: Decode auth. api key file and save it
        env:
          API_KEY_BASE64 : ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
        run: |
              ls
              mkdir private_keys
              echo -n "$API_KEY_BASE64" | base64 --decode --output private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8
              ls  private_keys
              echo "After Saving :"
      - name: Upload file to test flight
        run: |
             echo "Star Uploading"
             xcrun altool --validate-app -f  $RUNNER_TEMP/export/Starboard.ipa -t ios --apiKey ${{ secrets.APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.APPSTORE_API_ISSUER_ID }}
             xcrun altool --upload-app -f  $RUNNER_TEMP/export/Starboard.ipa -t ios --apiKey ${{ secrets.APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.APPSTORE_API_ISSUER_ID }}
      - name: Notify on Slack
        env:
          TITLE : "CI/CD Starboard-iOS"
          APP_VERSION : ""
          BUILD_VERSION : ""
        run: |
             export APP_VERSION=$(xcodebuild -showBuildSettings | grep MARKETING_VERSION | tr -d 'MARKETING_VERSION =')
             export BUILD_VERSION=$(xcodebuild -showBuildSettings | grep CURRENT_PROJECT_VERSION | tr -d 'CURRENT_PROJECT_VERSION =')
             curl -X POST -H "Authorization:Bearer ${{ secrets.SLACK_AUTH_TOKEN }}" -H "Content-Type:application/json" --data "{'channel':'${{ secrets.SLACK_CHANNEL_ID }}','username':'$TITLE','text':' \n<@UHUT7CJ9F>,<@U01JVNS10TA>:\n*Internal Test App $APP_VERSION($BUILD_VERSION) := *https://testflight.apple.com/join/bGbJS5xK\n*Changelog -> * \n${{ steps.ghpages.outputs.content }}'}" https://slack.com/api/chat.postMessage
             echo "Deployment finished"


#      - name: build archive
#        run: |
#          xcodebuild -scheme "GitTetsingDemo" \
#          -archivePath $RUNNER_TEMP/GitTetsingDemo.xcarchive \
#          -sdk iphoneos \
#          -configuration Debug \
#          -destination generic/platform=iOS \
#          clean archive
#
#      - name: export ipa
#        env:
#          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
#        run: |
#          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
#          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
#          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/GitTetsingDemo.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build
#
#      - name: Upload application
#        uses: actions/upload-artifact@v3
#        with:
#          name: app
#          path: ${{ runner.temp }}/build/GitTetsingDemo.ipa
#          # you can also archive the entire directory
#          # path: ${{ runner.temp }}/build
#          retention-days: 3
